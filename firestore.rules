rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check user role
    function hasRole(role) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Helper function to check if user is admin or manager
    function isAdminOrManager() {
      return hasRole('admin') || hasRole('manager');
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        (request.auth.uid == userId || hasRole('admin'));
    }
    
    // Onboardings collection
    match /onboardings/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAdminOrManager();
      allow update: if isAdminOrManager() || 
        (isAuthenticated() && resource.data.employeeEmail == request.auth.token.email);
      allow delete: if hasRole('admin');
    }
    
    // Documents collection
    match /documents/{documentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdminOrManager() || 
        (isAuthenticated() && resource.data.uploadedBy == request.auth.uid);
      allow delete: if hasRole('admin') || 
        (isAuthenticated() && resource.data.uploadedBy == request.auth.uid);
    }
    
    // Approvals collection (if separate)
    match /approvals/{documentId} {
      allow read: if isAuthenticated();
      allow write: if isAdminOrManager();
    }
  }
}